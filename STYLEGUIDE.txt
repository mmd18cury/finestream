Don't use empty lines in functions, only use 1 empty line between functions or methods and 3 between classes or class and includes.



Don't add empty line after function type with a bracket only, add it after a function block. {
	Always use figure brackets with "for" cycles, "if" conditions, "try"/"catch" blocks even if they contain one line only - with no exceptions, to make it easier to add new instructions in the future.
	For any type, concept, structure or class name use lower case, try to name them with one word, or with one word with 2-3 contractions, if not possible use_underscore between words, but as rare as you can.
}
For any function, including methods use CamelCase().
Don't use m_ prefix or its analogs for class members, when you want to denote class members use this->, but try to avoid it and give different variable different names.
For any variable use UPPER_CASE, you can use from 1 to 3 upper case characters to denote its type, for example: bool BBYTE, string STRTEXT. If it's a phrase and at least one full word in it without contraction use _, otherwise make it a single word like LPZ (LEFT PUZZLE).
In macros use the same rules, if it's a macros of a type, use lwcs (lowercase), if it's a macro function use #define Macros(x, y) CamelCaseFunctionName(x, y), if it's a macros of a variable or other identifier use UPCS (uppercase).
If you make some commentary, use  // two spaces before slashes and one space after, if you are commenting code to disallow it don't use a space after it: //int a = 0;
Don't write two instructions on one line;
DoInstruction1();
do instruction = 2;
Avoid making several instructions out of one, use:
 int A, B, C;
and:
 int LONG_NAME1,
     LONG_NAME2,
     LONG_NAME3;
don't use:
 int a;
 int b;
 int c;
same about streams, use:
 cout << "123"
      << "456";
don't use:
 cout << "123";
 cout << "456";
This rule can be ignored for initializations if you think, that if will be better:
you can write either this way:
	int A, B;
or this way:
	int A,
	    B;
either this way:
	int A = B, C = D;
or this way:
	int A = B + C, 
	    D = E + F;
Divide lines more than 80 characters into several lines.
In "for" cycles separate each ; statement this way, if there's more than one assignment:
	for (short L = BRLAST_BYTE.BITSN, R = L + CHAR_BIT; 
	     R <= N; 
	     L += CHAR_BIT, R += CHAR_BIT)
	{
		(BSLINE <<= CHAR_BIT) |= GetByte();
	}
Don't do this way:
	for (short 
		L = BRLAST_BYTE.BITSN, 
		R = L + CHAR_BIT; 
		R <= N; 
		L += CHAR_BIT, 
		R += CHAR_BIT)
	{
		(BSLINE <<= CHAR_BIT) |= GetByte();
	}
and don't do this way:
	for (short 
		L = BRLAST_BYTE.BITSN, R = L + CHAR_BIT; 
		R <= N; 
		L += CHAR_BIT, R += CHAR_BIT){
			(BSLINE <<= CHAR_BIT) |= GetByte();
	}
