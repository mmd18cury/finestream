-  add saving stream in array/pack, prepared to be sent, and than add move semantics for this pack
-  add saving stream in another representable view: some analog or extension of vector <bool> / bitset to store in bits, but show in chars '1' or '0'
-  add new parameteres to finestream constructor(), including, for example, bool for saving info of lengths, and
info about where to output - file, array/vector, package etc.
-  add a method for counting 1s in bytes 
-  add FromBytes(), add Get functions with input size parameter and Put functions with output size parameter
-  add some methods from FILE_STREAM into inline functions
-  add GetByte() or GetAny() that will input random number of bits given as a parameter, if the variable is bigger then just assign to the start of it
otherwise write only the size of variable
-  define +, -, += and -=, etc. for bitremedy
-  create child classes of bitremedy - leftaligned bitremedy and right aligned bitremedy, and they can be summed only with their type, for instance: lbitremedy and rbitremedy
-  add analog of std::countr_zero, countr_one, countl_one (countl_zero is already added)
-  add size constraints for operator << for container_adaptors (so that it could define how much bytes need to be written)
-  add functors for writting info about size of outputed bit sequences (like in Qt functions but as a functor in std::cout style)
-  add operator << (vector<bool>&, ofstream&) as for a bitset
-  return back operator << (bitremedy&, ofstream&)
-  add conversion function: from vb to bs and back
-  add functions to round current byte in the output stream, I mean skip ExtraZerosN() bits, same in ifinestream
-  finalize PutLongAny(), PutLongAnyReversed() with const T& to output/input long arithmetic values
-  add LeadingN() and BitSize() for pointers, such as char*, would be very convenient for Qt methods of QIODevice, QTCPSocket etc.
-  (1) rewrite finestream this way: find a way to effectively move a block of bytes (of buffer size) from 1 to CHB1 bits, may be it will even demand to write 
different versions for different proccessors; (2) then make two classes derived from vector<bool> and bitset<N> respectively and make an efficient copying from them
to the buffer bitshifting buffer sized block of their data during the process using the shifting method from the 1 item, the most important thing here is to not
save temporary result of bitshifting in the same variable but load it into the buffer that exact moment, (3) devide any bitset or other stream parameter into
several not less than 1 buffer size blocks (4) then use ofstream::write() and ifstream::read() to read and write the full block instead of get() and put() working
with 1 byte only
